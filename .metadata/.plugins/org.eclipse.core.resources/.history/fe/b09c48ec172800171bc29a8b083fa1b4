package applicationWindow;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.DefaultCaret;

import GameLogic.HumanPlayer;
import GameLogic.Inventory;
import GameLogic.Room;
import GameLogic.WorldObject;
import applicationWindow.RenderPanel.Direction;
/**
 * the GUI for the game
 * @author wijesepasi
 *
 */
public class ApplicationWindow extends JFrame implements MouseListener, MouseMotionListener, KeyListener {

	public static boolean Highlight = false;
	public static int mouseX = 0;
	public static int mouseY = 0;

	private JPanel bottom;
	private JPanel gameScreen;
	private JPanel buttonHolder;
	private JMenuBar menu;
	private JTextField input;
	private JTextArea chat;
	private RenderPanel renderingPanel;
	private InventoryPanel inventoryPanel;
	private MapPanel mapPanel;
	private ClientLogic client;
	private JLabel roomLabel;

	/**
	 * constructor for the ApplicationWindow
	 * @param client
	 */

	public ApplicationWindow(ClientLogic client) {
		setLayout(new BorderLayout());
		setFocusable(true);
		requestFocusInWindow();
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		bottom = new JPanel();
		buttonHolder = new JPanel();
		gameScreen = new JPanel(new BorderLayout());
		menu = new JMenuBar();
		input = new JTextField();
		chat = new JTextArea();
		renderingPanel = new RenderPanel(this);
		inventoryPanel = new InventoryPanel(this, new Inventory());
		mapPanel = new MapPanel(this, renderingPanel);
		this.client = client;
		setupMenu();
		setupGui();

	}

	/**
	 * sets and updates the rendering panel and roomLabel
	 * @param r
	 */

	public void setRoom(Room r) {
		renderingPanel.updateRoom(r);
		roomLabel.setText("Current Room: " + renderingPanel.getRoomName() + " Current Direction " + renderingPanel.getDirection());
	}

	/**
	 * sets the inventory
	 * @param i
	 */

	public void setInventory(Inventory i) {
		inventoryPanel.setInventory(i);
	}

	/**
	 * adds text from textarea to the scroll pane
	 * @param message this is the text in the text area
	 */

	public void appendMessage(String message) {
		chat.append(message + "\n");
	}

	/**
	 * this method sets up and keeps the gui up to date with whats happening in the other Panels (Rendering and Inventory)
	 */
	private void setupGui() {

		//creating buttons and Panels for the top part of GUI
		gameScreen.setBorder(BorderFactory.createLineBorder(Color.black));
		inventoryPanel.setPreferredSize(new Dimension(236, 218));
		mapPanel.setPreferredSize(new Dimension(236, 218));
		roomLabel = new JLabel(renderingPanel.getRoomName());
		JPanel gameHolder = new JPanel(new BorderLayout());
		JButton rotateLeft = new JButton("Rotate Left");
		JButton rotateRight = new JButton("Rotate Right");
		buttonHolder.setLayout(new BoxLayout(buttonHolder, BoxLayout.Y_AXIS));

		//creating the bottom parts of GUI
		JPanel inputPanel = new JPanel(new BorderLayout());// this hold the text area and the scroll pane
		JPanel leftPanel = new JPanel(new BorderLayout());// this hold the inventory panel
		JPanel rightPanel = new JPanel(new BorderLayout());//this holds the minimap panel
		JScrollPane scroll = new JScrollPane(chat);
		inputPanel.setBorder(BorderFactory.createLineBorder(Color.blue));
		rightPanel.setBorder(BorderFactory.createLineBorder(Color.blue));
		leftPanel.setBorder(BorderFactory.createLineBorder(Color.blue));
		scroll.setPreferredSize(new Dimension(400, 200));

		//adding the rendring pannel, label and menu to a panel
		gameScreen.add(roomLabel, BorderLayout.SOUTH);
		gameScreen.add(renderingPanel, BorderLayout.CENTER);
		gameScreen.add(menu, BorderLayout.NORTH);

		//adding the rotate buttons to their Panel
		gameHolder.add(gameScreen, BorderLayout.WEST);
		buttonHolder.add(rotateLeft, BorderLayout.WEST);
		buttonHolder.add(rotateRight, BorderLayout.EAST);
		gameScreen.add(buttonHolder, BorderLayout.EAST);

		//Rotate LeftButton Action
		rotateLeft.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				renderingPanel.moveDirection("left");
				renderingPanel.requestFocus();
				roomLabel.setText("Current Room: " + renderingPanel.getRoomName() + " Current Direction " + renderingPanel.getDirection());
				repaint();
			}
		});

		//Rotate RightButton Action
		rotateRight.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				renderingPanel.moveDirection("right");
				renderingPanel.requestFocus();
				roomLabel.setText("Current Room: " + renderingPanel.getRoomName() + " Current Direction " + renderingPanel.getDirection());
				repaint();
			}
		});

		//making it so that you cant send empty string through the chat
		input.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (input.getText().equalsIgnoreCase("")) {
					return;
				}
				client.sendMessage(input.getText());
				input.setText("");
			}
		});

		//adding componets to the bottom pannel
		inputPanel.add(scroll, BorderLayout.CENTER);
		inputPanel.add(input, BorderLayout.SOUTH);
		leftPanel.add(inventoryPanel, BorderLayout.CENTER);
		rightPanel.add(mapPanel, BorderLayout.CENTER);

		bottom.add(leftPanel, BorderLayout.WEST);
		bottom.add(inputPanel, BorderLayout.CENTER);
		bottom.add(rightPanel, BorderLayout.EAST);

		//making it so that the chat automatically scrolls to the bottom when someone talks
		DefaultCaret caret = (DefaultCaret) chat.getCaret();
		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
		chat.setEditable(false);

		//adding the finished GUI
		setSize(900, 800);
		setResizable(false);
		add(gameScreen, BorderLayout.CENTER);
		add(bottom, BorderLayout.SOUTH);

		//adding key and mouse listeners
		renderingPanel.addMouseMotionListener(this);
		addKeyListener(this);
		inputPanel.addKeyListener(this);
		leftPanel.addKeyListener(this);
		rightPanel.addKeyListener(this);
		scroll.addKeyListener(this);
		renderingPanel.addKeyListener(this);
		gameScreen.addKeyListener(this);
		bottom.addKeyListener(this);

	}

	/**
	 * shows the window
	 */

	public void showWindow() {
		setVisible(true);
	}


	/**
	 * this method makes a window that will display the string that is passed in
	 * @param message this is the message that will show on the window that pops up
	 */

	public void showDialog(String message){
		JOptionPane.showMessageDialog(this,message );
	}

	/**
	 * this creates the items for the menu and has the actions for the differnt menu options
	 */

	private void setupMenu() {
		JMenu game = new JMenu("Game");
		//save option
		JMenuItem save = new JMenuItem(new AbstractAction("Save") {
			public void actionPerformed(ActionEvent e) {
				client.sendToServer("#s");
				showDialog("Game Saved");
			}
		});
		//load option
		JMenuItem load = new JMenuItem(new AbstractAction("Load") {
			public void actionPerformed(ActionEvent e) {
				client.sendToServer("#n");
				showDialog("Game Loaded");
			}
		});
		//adding the menu option to the menu
		game.add(save);
		game.add(load);
		//adding the menu to the game
		menu.add(game);
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// determining if it was the rendering panel or the inventory panel that was clicked on and then taking the correct action
		if (e.getSource().toString().substring(18, 19).equals("I")) {
			inventoryPanel.setMousePoint(e.getPoint());
			client.setSelectedItem(inventoryPanel.getIndexOfSelection());
		}
		else if (e.getSource().toString().substring(18, 19).equals("R")) {
			renderingPanel.setMousePoint(e.getPoint());
			renderingPanel.requestFocus();
			Point p = renderingPanel.getcord(e.getPoint());
			if (p != null) {
				client.clickedAt((int) p.getX(), (int) p.getY());
			}
		}
		repaint();
	}

	@Override
	public void mousePressed(MouseEvent e) {


	}

	@Override
	public void mouseReleased(MouseEvent e) {


	}

	@Override
	public void mouseEntered(MouseEvent e) {


	}

	@Override
	public void mouseExited(MouseEvent e) {


	}

	@Override
	public void keyTyped(KeyEvent e) {


	}

	@Override
	public void keyPressed(KeyEvent e) {


	}

	/**
	 * makes the player move with the WASD keys, based on the direction of the rendering pannel and the players current postiton.
	 */
	@Override
	public void keyReleased(KeyEvent e) {
		//makes the player move through wasd
		String str = "" + e.getKeyChar();
		HumanPlayer player = client.getPlayer();
		Room currentRoom = client.getRoom();
		Point playerPos = currentRoom.positionOfObject(player);
		int newx = 0;
		int newy = 0;
		if (str.equalsIgnoreCase("w")) {
			if (renderingPanel.getDirection().equalsIgnoreCase("north")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() - 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("west")) {
				newx = (int) playerPos.getX() - 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("south")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() + 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("east")) {
				newx = (int) playerPos.getX() + 1;
				newy = (int) playerPos.getY();
			}
		} else if (str.equalsIgnoreCase("a")) {
			if (renderingPanel.getDirection().equalsIgnoreCase("north")) {
				newx = (int) playerPos.getX() - 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("west")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() + 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("south")) {
				newx = (int) playerPos.getX() + 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("east")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() - 1;
			}
		} else if (str.equalsIgnoreCase("s")) {
			if (renderingPanel.getDirection().equalsIgnoreCase("north")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() + 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("west")) {
				newx = (int) playerPos.getX() + 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("south")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() - 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("east")) {
				newx = (int) playerPos.getX() - 1;
				newy = (int) playerPos.getY();
			}
		} else if (str.equalsIgnoreCase("d")) {
			if (renderingPanel.getDirection().equalsIgnoreCase("north")) {
				newx = (int) playerPos.getX() + 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("west")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() - 1;
			} else if (renderingPanel.getDirection().equalsIgnoreCase("south")) {
				newx = (int) playerPos.getX() - 1;
				newy = (int) playerPos.getY();
			} else if (renderingPanel.getDirection().equalsIgnoreCase("east")) {
				newx = (int) playerPos.getX();
				newy = (int) playerPos.getY() + 1;
			}
		}

		client.movePlayer(newx, newy);

	}
	/**
	 * deselected the currently active inventory panel
	 */
	public void deselect() {
		inventoryPanel.setMousePoint(new Point(0, 0));
	}


	@Override
	public void mouseDragged(MouseEvent e) {


	}

	/**
	 * made it so that when you hover the mouse over items and doors the the tile its in highlights
	 */
	@Override
	public void mouseMoved(MouseEvent e) {
		//made it so that when you hover over the items and doors that tile highlights
		int x = e.getX() / Room.TILELENGTH;
		int y = e.getY() / Room.TILELENGTH;
		Direction dir = Direction.valueOf(renderingPanel.getDirection());
		int xTrue = 0;
		int yTrue = 0;
		if (dir == Direction.NORTH || dir == Direction.SOUTH) {
			xTrue = client.getRoom().getRotatedX(dir, x);
			yTrue = client.getRoom().getRotatedY(dir, y);
		} else {
			xTrue = client.getRoom().getRotatedX(dir, y);
			yTrue = client.getRoom().getRotatedY(dir, x);
		}
		WorldObject obj = client.getRoom().objectAt(xTrue, yTrue);
		if (obj == null) {
			ApplicationWindow.Highlight = false;
			ApplicationWindow.mouseX = -1;
			ApplicationWindow.mouseY = -1;
			repaint();
			return;
		}
		ApplicationWindow.Highlight = true;
		ApplicationWindow.mouseX = x;
		ApplicationWindow.mouseY = y;
		repaint();
	}


}
