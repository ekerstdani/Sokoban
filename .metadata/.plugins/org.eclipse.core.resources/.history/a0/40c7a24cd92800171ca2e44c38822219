package Rendering;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.Timer;

import Sokoban.Sokoban.Direction;

public class Drawing extends JPanel implements ActionListener, KeyListener{
	private Graphics g;
	private JComponent drawing;
	private final String PATH ="src/Images/";
	
	//----------------
	
	Timer t = new Timer(5,this);
	int x=0, y=0, velX =0, velY=0;
	
	//----------------
	
	
	public Drawing(JComponent drawing){
		this.drawing=drawing;
		//---------------------
		t.start();
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		//----------------------
	}
	
	public void drawPlayer(int imageHeight, int imageWidth, int xPos, int yPos, Graphics g, Direction d){
		BufferedImage character = null;
		try {
			//What picture to draw
			if(d.equals(Direction.SOUTH)){
				character = ImageIO.read(new File(PATH+"Character4.png"));
			}
			else if(d.equals(Direction.NORTH)){
				character = ImageIO.read(new File(PATH+"Character7.png"));
			}
			else if(d.equals(Direction.EAST)){
				//Stopping
				character = ImageIO.read(new File(PATH+"Character3.png"));
			
			}
			else if(d.equals(Direction.WEST)){
				character = ImageIO.read(new File(PATH+"Character10.png"));
			}
			g.drawImage(character,xPos,yPos,imageWidth,imageHeight, drawing);
			
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void drawArea(int imageHeight, int imageWidth, Graphics g){
		BufferedImage area;
		try {
			area = ImageIO.read(new File(PATH+"GroundGravel_Sand.png"));
			//Loop to fill entire screen
			for(int i = 0; i < drawing.getWidth(); i+=imageWidth){
				for(int j = 0; j < drawing.getHeight(); j+=imageHeight){
					g.drawImage(area,i,j,imageWidth,imageHeight, drawing);
				}
			}
					
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	
	}
//------------------------------------------------------------------
	//Trying to get to move nice
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		BufferedImage character;
		try {
			character = ImageIO.read(new File("src/Images/Character3.png"));
			g.drawImage(character,x,y,35,40, drawing);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		int code = e.getKeyCode();
		if(code == KeyEvent.VK_UP){
			up();
		}
		
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		repaint();
		x+=velX;
		y =+velY;
	}
	
	public void up(){
		velY = -1;
		velX =0;
	}
	public void down(){
		velY = 1;
		velX =0;
	}
	public void left(){
		velY = 0;
		velX =-1;
	}
	public void right(){
		velY = 0;
		velX =1;
	}
	
	
	//---------------------------------------------------------------------
	
	
	
}
